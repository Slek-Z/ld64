/*
x64 Length Disassembler.
Copyright (C) 2020 Slek

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <cctype>
#include <cstdint>
#include <iomanip>
#include <ios>
#include <iostream>
#include <iterator>
#include <ostream>
#include <string>
#include <sstream>
#include <vector>

/* CHECK_PREFIX */
const static int prefix_t[256] = {
     /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 0 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 1 */
        0,0,0,0,0,0,1,0, 0,0,0,0,0,0,1,0,  /* 2 */
        0,0,0,0,0,0,1,0, 0,0,0,0,0,0,1,0,  /* 3 */
        1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,  /* 4 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 5 */
        0,0,0,0,1,1,1,1, 0,0,0,0,0,0,0,0,  /* 6 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 7 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 8 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 9 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* a */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* b */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* c */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* d */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* e */
        1,0,1,1,0,0,0,0, 0,0,0,0,0,0,0,0   /* f */
};


/* CHECK_SUPPORTED */
const static int supported_t[256] = {
     /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
        1,1,1,1,1,1,0,0, 1,1,1,1,1,1,0,0,  /* 0 */
        1,1,1,1,1,1,0,0, 1,1,1,1,1,1,0,0,  /* 1 */
        1,1,1,1,1,1,0,0, 1,1,1,1,1,1,0,0,  /* 2 */
        1,1,1,1,1,1,0,0, 1,1,1,1,1,1,0,0,  /* 3 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
        1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,  /* 5 */
        0,0,0,1,0,0,0,0, 1,1,1,1,1,1,1,1,  /* 6 */
        1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,  /* 7 */
        1,1,0,1,1,1,1,1, 1,1,1,1,1,1,1,1,  /* 8 */
        1,1,1,1,1,1,1,1, 1,1,0,1,1,1,1,1,  /* 9 */
        1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,  /* a */
        1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,  /* b */
        1,1,1,1,0,0,1,1, 1,1,1,1,1,1,0,1,  /* c */
        1,1,1,1,0,0,0,1, 1,1,1,1,1,1,1,1,  /* d */
        1,1,1,1,1,1,1,1, 1,1,0,1,1,1,1,1,  /* e */
        0,0,0,0,0,1,1,1, 1,1,1,1,1,1,1,1   /* f */
};

/* CHECK_MODRM */
const static int modrm_t[256] = {
     /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
        1,1,1,1,0,0,0,0, 1,1,1,1,0,0,0,0,  /* 0 */
        1,1,1,1,0,0,0,0, 1,1,1,1,0,0,0,0,  /* 1 */
        1,1,1,1,0,0,0,0, 1,1,1,1,0,0,0,0,  /* 2 */
        1,1,1,1,0,0,0,0, 1,1,1,1,0,0,0,0,  /* 3 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 5 */
        0,0,0,1,0,0,0,0, 0,1,0,1,0,0,0,0,  /* 6 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 7 */
        1,1,0,1,1,1,1,1, 1,1,1,1,1,1,1,1,  /* 8 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 9 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* a */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* b */
        1,1,0,0,0,0,1,1, 0,0,0,0,0,0,0,0,  /* c */
        1,1,1,1,0,0,0,0, 1,1,1,1,1,1,1,1,  /* d */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* e */
        0,0,0,0,0,0,1,1, 0,0,0,0,0,0,1,1   /* f */
};

/* CHECK_DATA0 */
const static int data0_t[256] = {
     /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
        1,1,1,1,0,0,0,0, 1,1,1,1,0,0,0,0,  /* 0 */
        1,1,1,1,0,0,0,0, 1,1,1,1,0,0,0,0,  /* 1 */
        1,1,1,1,0,0,0,0, 1,1,1,1,0,0,0,0,  /* 2 */
        1,1,1,1,0,0,0,0, 1,1,1,1,0,0,0,0,  /* 3 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
        1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,  /* 5 */
        0,0,0,1,0,0,0,0, 0,0,0,0,1,1,1,1,  /* 6 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 7 */
        0,0,0,0,1,1,1,1, 1,1,1,1,1,1,1,1,  /* 8 */
        1,1,1,1,1,1,1,1, 1,1,0,1,1,1,1,1,  /* 9 */
        0,0,0,0,1,1,1,1, 0,0,1,1,1,1,1,1,  /* a */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* b */
        0,0,0,1,0,0,0,0, 0,1,0,1,1,0,0,1,  /* c */
        1,1,1,1,0,0,0,1, 1,1,1,1,1,1,1,1,  /* d */
        0,0,0,0,0,0,0,0, 0,0,0,0,1,1,1,1,  /* e */
        0,0,0,0,0,1,0,0, 1,1,1,1,1,1,1,1   /* f */
};

/* CHECK_DATA1 */
const static int data1_t[256] = {
     /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
        0,0,0,0,1,0,0,0, 0,0,0,0,1,0,0,0,  /* 0 */
        0,0,0,0,1,0,0,0, 0,0,0,0,1,0,0,0,  /* 1 */
        0,0,0,0,1,0,0,0, 0,0,0,0,1,0,0,0,  /* 2 */
        0,0,0,0,1,0,0,0, 0,0,0,0,1,0,0,0,  /* 3 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 5 */
        0,0,0,0,0,0,0,0, 0,0,1,1,0,0,0,0,  /* 6 */
        1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,  /* 7 */
        1,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 8 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 9 */
        0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,  /* a */
        1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0,  /* b */
        1,1,0,0,0,0,1,0, 1,0,0,0,0,1,0,0,  /* c */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* d */
        1,1,1,1,1,1,1,1, 0,0,0,1,0,0,0,0,  /* e */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0   /* f */
};

/* CHECK_DATA66 */
const static int data66_t[256] = {
     /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
        0,0,0,0,0,1,0,0, 0,0,0,0,0,1,0,0,  /* 0 */
        0,0,0,0,0,1,0,0, 0,0,0,0,0,1,0,0,  /* 1 */
        0,0,0,0,0,1,0,0, 0,0,0,0,0,1,0,0,  /* 2 */
        0,0,0,0,0,1,0,0, 0,0,0,0,0,1,0,0,  /* 3 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 5 */
        0,0,0,0,0,0,0,0, 1,1,0,0,0,0,0,0,  /* 6 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 7 */
        0,1,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 8 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 9 */
        0,0,0,0,0,0,0,0, 0,1,0,0,0,0,0,0,  /* a */
        0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,  /* b */
        0,0,0,0,0,0,0,1, 0,0,0,0,0,0,0,0,  /* c */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* d */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* e */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0   /* f */
};

/* CHECK_SUPPORTED2 */
const static int supported2_t[256] = {
     /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
        0,0,0,0,0,1,0,1, 0,0,0,1,0,1,0,0,  /* 0 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  /* 1 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 2 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 3 */
        1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,  /* 4 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 5 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 6 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 7 */
        1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,  /* 8 */
        1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,  /* 9 */
        1,1,1,1,1,1,0,0, 1,1,0,1,1,1,1,1,  /* a */
        1,1,1,1,1,1,1,1, 0,0,1,1,1,1,1,1,  /* b */
        1,1,0,0,0,0,0,1, 1,1,1,1,1,1,1,1,  /* c */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* d */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* e */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0   /* f */
};

/* CHECK_MODRM2 */
const static int modrm2_t[256] = {
     /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,  /* 0 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  /* 1 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 2 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 3 */
        1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,  /* 4 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 5 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 6 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 7 */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 8 */
        1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,  /* 9 */
        0,0,0,1,1,1,0,0, 0,0,0,1,1,1,1,1,  /* a */
        1,1,1,1,1,1,1,1, 0,0,1,1,1,1,1,1,  /* b */
        1,1,0,0,0,0,0,1, 0,0,0,0,0,0,0,0,  /* c */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* d */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* e */
        0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0   /* f */
};

template<typename T>
std::string to_hex(T integral) {
  std::stringstream stream;
  stream << "0x"
         << std::setfill ('0') << std::setw(sizeof(T)*2)
         << std::hex << integral;
  return stream.str();
}

template<>
std::string to_hex(unsigned char integral) {
  std::stringstream stream;
  stream << "0x"
         << std::setfill ('0') << std::setw(2)
         << std::hex << (static_cast<int>(integral) & 0xff);
  return stream.str();
}

template<typename T>
inline std::ostream& operator<<(std::ostream& lhs, const std::vector<T>& rhs) {
    
    if (!rhs.empty())
      lhs << to_hex(rhs.front());
    
    if (rhs.size() > 1) {
      for (typename std::vector<T>::const_iterator cit = std::next(rhs.cbegin()); cit != rhs.cend(); ++cit)
        lhs << ", " << to_hex(*cit);
    }
    
    return lhs;
}

std::vector<std::uint8_t> values(const int table[256]) {
  std::vector<std::uint8_t> table_values;
  for (int i = 0; i < 256; ++i)
    if (table[i]) table_values.push_back(static_cast<std::uint8_t>(i));
  return table_values;
}

std::vector<std::uint64_t> entries(const int table[256]) {
  std::vector<std::uint64_t> table_entries(4, static_cast<std::uint64_t>(0));
  
  for (int i = 0; i < 4; ++i) {
    std::uint64_t entry = static_cast<std::uint64_t>(0);
    for (int j = 0; j < 64; ++j)
      entry += static_cast<std::uint64_t>(table[i*64 + j]) << j;
    table_entries[i] = entry;
  }
  
  return table_entries;
}

int main() {
  
  std::cout << "Prefix table:" << std::endl;
  std::cout << entries(prefix_t) << std::endl;
  
  std::cout << "Supported table:" << std::endl;
  std::cout << entries(supported_t) << std::endl;
  
  std::cout << "ModRM table:" << std::endl;
  std::cout << entries(modrm_t) << std::endl;
  
  std::cout << "Data0 table:" << std::endl;
  std::cout << entries(data0_t) << std::endl;
  
  std::cout << "Data1 table:" << std::endl;
  std::cout << entries(data1_t) << std::endl;
  
  std::cout << "Data66 table:" << std::endl;
  std::cout << entries(data66_t) << std::endl;
  
  std::cout << "Supported2 table:" << std::endl;
  std::cout << entries(supported2_t) << std::endl;
  
  std::cout << "ModRM2 table:" << std::endl;
  std::cout << entries(modrm2_t) << std::endl;
  
  return 0;
}
